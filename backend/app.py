from flask import Flask, request, jsonify
from flask_cors import CORS
import time
import os
import openai
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
logger.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ENVIRONMENT –ü–ï–†–ï–ú–ï–ù–ù–´–• ===")
logger.info(f"FLASK_ENV: {os.getenv('FLASK_ENV', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
logger.info(f"FLASK_DEBUG: {os.getenv('FLASK_DEBUG', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
logger.info(f"OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if os.getenv('OPENAI_API_KEY') else '–ù–ï–¢'}")
if os.getenv('OPENAI_API_KEY'):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    key = os.getenv('OPENAI_API_KEY')
    if key and len(key) > 16:
        masked_key = f"{key[:8]}...{key[-8:]}"
    else:
        masked_key = "–ö–û–†–û–¢–ö–ò–ô_–ö–õ–Æ–ß"
    logger.info(f"OPENAI_API_KEY: {masked_key}")
logger.info(f"OPENAI_API_BASE_URL: {os.getenv('OPENAI_API_BASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
logger.info(f"OPENAI_MODEL_NAME: {os.getenv('OPENAI_MODEL_NAME', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')}")
logger.info("=== –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
for key, value in os.environ.items():
    if 'OPENAI' in key or 'FLASK' in key:
        if 'API_KEY' in key and value:
            masked_value = f"{value[:8]}...{value[-8:]}" if len(value) > 16 else "–ö–û–†–û–¢–ö–ò–ô_–ö–õ–Æ–ß"
            logger.info(f"{key}: {masked_value}")
        else:
            logger.info(f"{key}: {value}")
logger.info("=====================================")

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
def get_openai_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
    api_key = os.getenv('OPENAI_API_KEY')
    api_base_url = os.getenv('OPENAI_API_BASE_URL', 'https://api.openai.com/v1')
    
    if not api_key:
        logger.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return None
    
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ —Å base_url: {api_base_url}")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è openai 0.28.x
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –¥–ª—è –≤–µ—Ä—Å–∏–∏ 0.28.x...")
        openai.api_key = api_key
        openai.api_base = api_base_url
        
        logger.info("‚úÖ OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return "legacy_openai_028"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ OpenAI: {e}")
        return None

def combine_messages_with_llm(messages):
    """
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM
    """
    try:
        client = get_openai_client()
        if not client:
            logger.warning("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        model_name = os.getenv('OPENAI_MODEL_NAME', 'gpt-3.5-turbo')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM. –ú–æ–¥–µ–ª—å: {model_name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        messages_text = '\n'.join([f"- {msg}" for msg in messages])
        
        prompt = f"""–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–æ–¥–∞–≤—Ü—É. 
–û–±—ä–µ–¥–∏–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã/—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

{messages_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∞—á–Ω–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
- –û–±—ä–µ–¥–∏–Ω–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ª–æ–≥–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""

        logger.debug(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è LLM: {prompt}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI 0.28.x API
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ OpenAI 0.28.x API")
        response = openai.ChatCompletion.create(
            model=model_name,
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∂–ª–∏–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        result = response.choices[0].message.content.strip()
        
        logger.info("LLM —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å")
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç LLM: {result}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LLM: {e}")
        return None

def fallback_combine_messages(messages):
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ç–æ–¥–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    result = ' '.join(messages)
    logger.debug(f"Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result

@app.route('/chat/suggests/combine', methods=['POST'])
def combine_suggestions():
    """
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ
    """
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        data = request.get_json()
        
        if not data or 'messages' not in data:
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ messages")
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ messages'}), 400
        
        messages = data['messages']
        
        if not isinstance(messages, list) or len(messages) == 0:
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: messages –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º")
            return jsonify({'error': 'messages –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º'}), 400
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π: {messages}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM
        combined_message = combine_messages_with_llm(messages)
        used_llm = True
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é, –µ—Å–ª–∏ LLM –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if combined_message is None:
            logger.warning("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –º–µ—Ç–æ–¥")
            combined_message = fallback_combine_messages(messages)
            used_llm = False
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω LLM: {used_llm}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        time.sleep(0.2)
        
        return jsonify({
            'combined_message': combined_message,
            'original_count': len(messages),
            'used_llm': used_llm
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    llm_available = get_openai_client() is not None
    logger.info(f"–°—Ç–∞—Ç—É—Å LLM: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if llm_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    return jsonify({
        'status': 'OK', 
        'message': 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'llm_available': llm_available,
        'environment_info': {
            'openai_api_key_set': bool(os.getenv('OPENAI_API_KEY')),
            'openai_api_base_url': os.getenv('OPENAI_API_BASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'),
            'openai_model_name': os.getenv('OPENAI_MODEL_NAME', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
        }
    })

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
try:
    client = get_openai_client()
    if client:
        logger.info("‚úÖ LLM –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning("‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback —Ä–µ–∂–∏–º")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ LLM: {e}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ __main__")
    app.run(host='0.0.0.0', port=5000, debug=True)
else:
    logger.info("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–∫ –º–æ–¥—É–ª—å") 